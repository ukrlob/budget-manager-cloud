"""
Plaid Bank Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ Plaid
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –±–∞–Ω–∫–æ–≤
"""

import asyncio
import logging
import os
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from backend.app.banks.plaid_integration import PlaidBankConnector

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PlaidBankManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ Plaid"""
    
    def __init__(self):
        self.banks = {
            "RBC": {
                "name": "Royal Bank of Canada",
                "access_token": os.getenv("RBC_ACCESS_TOKEN"),
                "item_id": os.getenv("RBC_ITEM_ID"),
                "status": "unknown"
            },
            "BMO": {
                "name": "Bank of Montreal", 
                "access_token": os.getenv("BMO_ACCESS_TOKEN"),
                "item_id": os.getenv("BMO_ITEM_ID"),
                "status": "unknown"
            },
            "WALMART": {
                "name": "Walmart Rewards",
                "access_token": os.getenv("WALMART_ACCESS_TOKEN"),
                "item_id": os.getenv("WALMART_ITEM_ID"),
                "status": "unknown"
            },
            "CIBC": {
                "name": "Canadian Imperial Bank of Commerce",
                "access_token": os.getenv("CIBC_ACCESS_TOKEN"),
                "item_id": os.getenv("CIBC_ITEM_ID"),
                "status": "unknown"
            }
        }
        
        self.plaid_credentials = {
            "client_id": os.getenv("PLAID_CLIENT_ID"),
            "secret": os.getenv("PLAID_SECRET"),
            "environment": os.getenv("PLAID_ENVIRONMENT", "production")
        }
    
    async def check_all_banks(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤"""
        print("üè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤...")
        print("=" * 60)
        
        for bank_code, bank_info in self.banks.items():
            print(f"\nüìä {bank_info['name']} ({bank_code})")
            print("-" * 40)
            
            if not bank_info['access_token']:
                print("‚ùå Access Token –Ω–µ –Ω–∞–π–¥–µ–Ω")
                bank_info['status'] = "no_token"
                continue
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –±–∞–Ω–∫–∞
                credentials = {
                    **self.plaid_credentials,
                    "access_token": bank_info['access_token'],
                    "item_id": bank_info['item_id']
                }
                
                connector = PlaidBankConnector(credentials)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if await connector.connect():
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç–∞
                    accounts = await connector.get_accounts()
                    print(f"üí≥ –°—á–µ—Ç–æ–≤: {len(accounts)}")
                    
                    if accounts:
                        for account in accounts:
                            balance = account.get('current_balance', 0)
                            currency = account.get('currency', 'CAD')
                            print(f"  ‚Ä¢ {account['name']} ({account['type']}) - {balance} {currency}")
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        account_id = accounts[0]['id']
                        end_date = date.today()
                        start_date = end_date - timedelta(days=7)
                        
                        transactions = await connector.get_transactions(account_id, start_date, end_date)
                        print(f"üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(transactions)}")
                        
                        if transactions:
                            print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                            for i, trans in enumerate(transactions[:3]):
                                print(f"    {i+1}. {trans['date']} - {trans['name']} - {trans['amount']} {trans.get('currency', 'CAD')}")
                    
                    bank_info['status'] = "working"
                    
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                    bank_info['status'] = "connection_failed"
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                bank_info['status'] = "error"
    
    def show_bank_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤"""
        print("\nüìã –°–¢–ê–¢–£–° –ë–ê–ù–ö–û–í")
        print("=" * 60)
        
        for bank_code, bank_info in self.banks.items():
            status_icons = {
                "working": "‚úÖ",
                "no_token": "‚ùå",
                "connection_failed": "‚ö†Ô∏è",
                "error": "‚ùå",
                "unknown": "‚ùì"
            }
            
            icon = status_icons.get(bank_info['status'], "‚ùì")
            print(f"{icon} {bank_code}: {bank_info['name']} - {bank_info['status']}")
    
    def show_accounts_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å—á–µ—Ç–∞–º"""
        print("\nüí∞ –°–í–û–î–ö–ê –ü–û –°–ß–ï–¢–ê–ú")
        print("=" * 60)
        
        total_accounts = 0
        total_balance = 0
        
        for bank_code, bank_info in self.banks.items():
            if bank_info['status'] == "working":
                print(f"\nüè¶ {bank_info['name']} ({bank_code})")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö
                total_accounts += 1
        
        print(f"\nüìä –í—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–∞–Ω–∫–æ–≤: {total_accounts}")
    
    def show_update_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–Ω–∫–æ–≤"""
        print("\nüîÑ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–ë–ù–û–í–õ–ï–ù–ò–Æ –ë–ê–ù–ö–û–í")
        print("=" * 60)
        
        for bank_code, bank_info in self.banks.items():
            if bank_info['status'] != "working":
                print(f"\nüìù {bank_code} ({bank_info['name']}):")
                
                if bank_info['status'] == "no_token":
                    print("  ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ Access Token –≤ .env —Ñ–∞–π–ª:")
                    print(f"    {bank_code}_ACCESS_TOKEN=your_token_here")
                
                elif bank_info['status'] == "connection_failed":
                    print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Access Token")
                    print("  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ - –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ Plaid Link")
                
                elif bank_info['status'] == "error":
                    print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ")
                    print("  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    def add_new_bank(self, bank_code, bank_name, access_token, item_id=None):
        """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–∞–Ω–∫"""
        print(f"\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞: {bank_name} ({bank_code})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ .env —Ñ–∞–π–ª
        env_file = ".env"
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            content = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        new_vars = f"\n# {bank_name}\n{bank_code}_ACCESS_TOKEN={access_token}\n"
        if item_id:
            new_vars += f"{bank_code}_ITEM_ID={item_id}\n"
        
        content += new_vars
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –ë–∞–Ω–∫ {bank_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üè¶ PLAID BANK MANAGER")
    print("=" * 60)
    
    manager = PlaidBankManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –±–∞–Ω–∫–∏
    await manager.check_all_banks()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    manager.show_bank_status()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    manager.show_accounts_summary()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é
    manager.show_update_instructions()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        print("\nüîß –î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –±–∞–Ω–∫–∏ –∑–∞–Ω–æ–≤–æ")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö")
        print("3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–∫")
        print("4. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
        
        if choice == "1":
            await manager.check_all_banks()
            manager.show_bank_status()
        
        elif choice == "2":
            manager.show_accounts_summary()
        
        elif choice == "3":
            bank_code = input("–ö–æ–¥ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, CIBC): ").strip().upper()
            bank_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: ").strip()
            access_token = input("Access Token: ").strip()
            item_id = input("Item ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None
            
            manager.add_new_bank(bank_code, bank_name, access_token, item_id)
        
        elif choice == "4":
            manager.show_update_instructions()
        
        elif choice == "5":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    asyncio.run(main())

