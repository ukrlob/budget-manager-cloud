"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ BMO —á–µ—Ä–µ–∑ Plaid
"""

import asyncio
import logging
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from backend.app.banks.plaid_integration import PlaidBankConnector

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def check_bmo_accounts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ BMO"""
    print("üè¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ BMO...")
    
    plaid_credentials = {
        "client_id": "685c0e30304b670024efcd0d",
        "secret": "c85668bbb1564530b9b71ffc568424",
        "environment": "production",
        "access_token": "access-production-ed446475-839e-4f0d-8984-20f4f8a7dd53",
        "item_id": None
    }
    
    try:
        connector = PlaidBankConnector(plaid_credentials)
        
        if await connector.connect():
            print("‚úÖ BMO: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
            accounts = await connector.get_accounts()
            print(f"üìä BMO: –ü–æ–ª—É—á–µ–Ω–æ {len(accounts)} —Å—á–µ—Ç–æ–≤")
            
            for i, account in enumerate(accounts, 1):
                print(f"\nüí≥ –°—á–µ—Ç {i}:")
                print(f"  ID: {account['id']}")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {account['name']}")
                print(f"  –¢–∏–ø: {account['type']}")
                print(f"  –ü–æ–¥—Ç–∏–ø: {account['subtype']}")
                print(f"  –ë–∞–ª–∞–Ω—Å: {account['current_balance']} {account['currency']}")
                print(f"  –ë–∞–Ω–∫: {account.get('bank_name', 'Unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
            print(f"\nüí∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤...")
            end_date = date.today()
            start_date = end_date - timedelta(days=30)
            
            for account in accounts:
                print(f"\nüìà –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å—á–µ—Ç–∞: {account['name']}")
                transactions = await connector.get_transactions(account['id'], start_date, end_date)
                print(f"  –ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 30 –¥–Ω–µ–π")
                
                if transactions:
                    print("  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
                    for i, trans in enumerate(transactions[:5]):
                        print(f"    {i+1}. {trans['date']} - {trans['name']} - {trans['amount']} {trans.get('currency', 'CAD')}")
                else:
                    print("  –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥")
            
            return True
        else:
            print("‚ùå BMO: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå BMO: –û—à–∏–±–∫–∞ - {e}")
        return False

if __name__ == "__main__":
    asyncio.run(check_bmo_accounts())

