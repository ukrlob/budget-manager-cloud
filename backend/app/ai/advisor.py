"""
AI –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

from typing import List, Dict, Any, Optional
from datetime import datetime, date, timedelta
import logging
import json
import google.generativeai as genai

logger = logging.getLogger(__name__)


class FinancialAdvisor:
    """
    AI –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –≤—ã–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞
    - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–∏—Å–∫–∞—Ö
    - –°–æ–≤–µ—Ç—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è Gemini AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.api_key = api_key or "AIzaSyBvQZvQZvQZvQZvQZvQZvQZvQZvQZvQZvQ"  # –ó–∞–≥–ª—É—à–∫–∞
        self.analysis_history = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI
        if self.api_key:
            try:
                genai.configure(api_key=self.api_key)
                self.model = genai.GenerativeModel('gemini-pro')
                self.ai_enabled = True
                logger.info("Gemini AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini AI: {e}")
                self.ai_enabled = False
        else:
            self.ai_enabled = False
        
    async def analyze_financial_health(self, financial_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        
        Args:
            financial_data: –î–∞–Ω–Ω—ã–µ –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è...")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            income_analysis = await self._analyze_income(financial_data)
            expense_analysis = await self._analyze_expenses(financial_data)
            investment_analysis = await self._analyze_investments(financial_data)
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            overall_score = self._calculate_financial_score(
                income_analysis, expense_analysis, investment_analysis
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = await self._generate_recommendations(
                income_analysis, expense_analysis, investment_analysis
            )
            
            analysis_result = {
                "timestamp": datetime.now().isoformat(),
                "overall_score": overall_score,
                "income_analysis": income_analysis,
                "expense_analysis": expense_analysis,
                "investment_analysis": investment_analysis,
                "recommendations": recommendations,
                "risk_alerts": await self._check_risk_alerts(financial_data)
            }
            
            self.analysis_history.append(analysis_result)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∏–π –±–∞–ª–ª: {overall_score}/100")
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤: {e}")
            raise
    
    async def _analyze_income(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤"""
        transactions = data.get("transactions", [])
        accounts = data.get("accounts", [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã
        income_transactions = [
            t for t in transactions 
            if t.get("amount", 0) > 0 and t.get("category") == "–î–æ—Ö–æ–¥—ã"
        ]
        
        total_income = sum(t["amount"] for t in income_transactions)
        monthly_income = total_income / 12 if total_income > 0 else 0
        
        return {
            "total_income": total_income,
            "monthly_income": monthly_income,
            "income_stability": "stable",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            "income_sources": len(set(t.get("description", "") for t in income_transactions))
        }
    
    async def _analyze_expenses(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        transactions = data.get("transactions", [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        expense_transactions = [
            t for t in transactions 
            if t.get("amount", 0) < 0
        ]
        
        total_expenses = abs(sum(t["amount"] for t in expense_transactions))
        monthly_expenses = total_expenses / 12 if total_expenses > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_expenses = {}
        for t in expense_transactions:
            category = t.get("category", "–î—Ä—É–≥–æ–µ")
            amount = abs(t["amount"])
            category_expenses[category] = category_expenses.get(category, 0) + amount
        
        return {
            "total_expenses": total_expenses,
            "monthly_expenses": monthly_expenses,
            "category_breakdown": category_expenses,
            "top_expense_category": max(category_expenses.items(), key=lambda x: x[1])[0] if category_expenses else None
        }
    
    async def _analyze_investments(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        # –ü–æ–∫–∞ —á—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        return {
            "total_investments": 0,
            "portfolio_diversity": "low",
            "risk_level": "conservative",
            "expected_returns": 0
        }
    
    def _calculate_financial_score(self, income: Dict, expenses: Dict, investments: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ (0-100)"""
        score = 50  # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª
        
        # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        if income.get("monthly_income", 0) > 0:
            expense_ratio = expenses.get("monthly_expenses", 0) / income.get("monthly_income", 1)
            if expense_ratio < 0.5:
                score += 20
            elif expense_ratio < 0.7:
                score += 10
            elif expense_ratio > 0.9:
                score -= 20
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ—Ö–æ–¥–æ–≤
        if income.get("income_sources", 0) > 1:
            score += 10
        
        return min(100, max(0, score))
    
    async def _generate_recommendations(self, income: Dict, expenses: Dict, investments: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_ratio = expenses.get("monthly_expenses", 0) / max(income.get("monthly_income", 1), 1)
        
        if expense_ratio > 0.8:
            recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –±—é–¥–∂–µ—Ç.")
        
        if expenses.get("top_expense_category"):
            recommendations.append(f"üí° –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {expenses['top_expense_category']}. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º
        if expense_ratio < 0.7:
            recommendations.append("‚úÖ –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤. –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è.")
        
        return recommendations
    
    async def _check_risk_alerts(self, data: Dict[str, Any]) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç
        accounts = data.get("accounts", [])
        for account in accounts:
            if account.get("balance", 0) < 0:
                alerts.append(f"üö® –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ {account.get('name', 'Unknown')}")
        
        return alerts
    
    async def get_investment_advice(self, portfolio_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
        Args:
            portfolio_data: –î–∞–Ω–Ω—ã–µ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
            
        Returns:
            Dict: –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        if self.ai_enabled:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini AI
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                
                –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {json.dumps(portfolio_data, indent=2)}
                
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ:
                1. –û—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
                2. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∞–∫—Ç–∏–≤–æ–≤
                4. –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
                
                –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
                """
                
                response = self.model.generate_content(prompt)
                
                return {
                    "recommendations": response.text.split('\n'),
                    "risk_assessment": "moderate",
                    "suggested_allocations": {
                        "stocks": 60,
                        "bonds": 30,
                        "cash": 10
                    },
                    "ai_generated": True
                }
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
                # Fallback –∫ –±–∞–∑–æ–≤—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
                return {
                    "recommendations": [
                        "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
                    ],
                    "risk_assessment": "moderate",
                    "suggested_allocations": {
                        "stocks": 60,
                        "bonds": 30,
                        "cash": 10
                    },
                    "ai_generated": False
                }
        else:
            # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ AI
            return {
                "recommendations": [
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                    "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"
                ],
                "risk_assessment": "moderate",
                "suggested_allocations": {
                    "stocks": 60,
                    "bonds": 30,
                    "cash": 10
                },
                "ai_generated": False
            }
    
    def get_analysis_history(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤"""
        return self.analysis_history


