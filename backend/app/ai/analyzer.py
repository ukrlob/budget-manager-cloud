"""
–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã
"""

from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, date, timedelta
import statistics
import logging

logger = logging.getLogger(__name__)


class FinancialAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    - –í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
    - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.analysis_cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
    
    async def analyze_spending_trends(self, transactions: List[Dict[str, Any]], 
                                    period_days: int = 30) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        """
        try:
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {period_days} –¥–Ω–µ–π...")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=period_days)
            
            period_transactions = [
                t for t in transactions
                if t.get("amount", 0) < 0 and 
                self._parse_date(t.get("transaction_date", "")) >= start_date
            ]
            
            if not period_transactions:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_analysis = await self._analyze_by_categories(period_transactions)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_analysis = await self._analyze_by_time(period_transactions)
            
            # –í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
            anomalies = await self._detect_anomalies(period_transactions)
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
            stats = await self._calculate_spending_stats(period_transactions)
            
            result = {
                "period": {
                    "start_date": start_date.isoformat(),
                    "end_date": end_date.isoformat(),
                    "days": period_days
                },
                "total_transactions": len(period_transactions),
                "total_spent": abs(sum(t["amount"] for t in period_transactions)),
                "category_analysis": category_analysis,
                "time_analysis": time_analysis,
                "anomalies": anomalies,
                "statistics": stats,
                "insights": await self._generate_spending_insights(category_analysis, stats)
            }
            
            logger.info("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    async def _analyze_by_categories(self, transactions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        category_totals = {}
        category_counts = {}
        
        for transaction in transactions:
            category = transaction.get("category", "–î—Ä—É–≥–æ–µ")
            amount = abs(transaction["amount"])
            
            category_totals[category] = category_totals.get(category, 0) + amount
            category_counts[category] = category_counts.get(category, 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ
        sorted_categories = sorted(category_totals.items(), key=lambda x: x[1], reverse=True)
        
        total_spent = sum(category_totals.values())
        
        return {
            "by_amount": sorted_categories,
            "by_count": sorted(category_counts.items(), key=lambda x: x[1], reverse=True),
            "total_spent": total_spent,
            "category_percentages": {
                category: (amount / total_spent * 100) if total_spent > 0 else 0
                for category, amount in category_totals.items()
            }
        }
    
    async def _analyze_by_time(self, transactions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        daily_totals = {}
        weekly_totals = {}
        
        for transaction in transactions:
            trans_date = self._parse_date(transaction.get("transaction_date", ""))
            if not trans_date:
                continue
                
            amount = abs(transaction["amount"])
            
            # –ü–æ –¥–Ω—è–º
            day_key = trans_date.isoformat()
            daily_totals[day_key] = daily_totals.get(day_key, 0) + amount
            
            # –ü–æ –Ω–µ–¥–µ–ª—è–º
            week_start = trans_date - timedelta(days=trans_date.weekday())
            week_key = week_start.isoformat()
            weekly_totals[week_key] = weekly_totals.get(week_key, 0) + amount
        
        return {
            "daily": daily_totals,
            "weekly": weekly_totals,
            "average_daily": statistics.mean(daily_totals.values()) if daily_totals else 0,
            "average_weekly": statistics.mean(weekly_totals.values()) if weekly_totals else 0
        }
    
    async def _detect_anomalies(self, transactions: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        anomalies = []
        
        if not transactions:
            return anomalies
        
        amounts = [abs(t["amount"]) for t in transactions]
        mean_amount = statistics.mean(amounts)
        std_amount = statistics.stdev(amounts) if len(amounts) > 1 else 0
        
        # –ê–Ω–æ–º–∞–ª–∏–∏ –ø–æ —Å—É–º–º–µ (–±–æ–ª—å—à–µ 2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
        threshold = mean_amount + 2 * std_amount
        
        for transaction in transactions:
            amount = abs(transaction["amount"])
            if amount > threshold:
                anomalies.append({
                    "type": "high_amount",
                    "transaction": transaction,
                    "amount": amount,
                    "threshold": threshold,
                    "severity": "high" if amount > mean_amount + 3 * std_amount else "medium"
                })
        
        return anomalies
    
    async def _calculate_spending_stats(self, transactions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        amounts = [abs(t["amount"]) for t in transactions]
        
        if not amounts:
            return {}
        
        return {
            "mean": statistics.mean(amounts),
            "median": statistics.median(amounts),
            "std_dev": statistics.stdev(amounts) if len(amounts) > 1 else 0,
            "min": min(amounts),
            "max": max(amounts),
            "total": sum(amounts)
        }
    
    async def _generate_spending_insights(self, category_analysis: Dict, stats: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category_analysis.get("by_amount"):
            top_category, top_amount = category_analysis["by_amount"][0]
            top_percentage = category_analysis["category_percentages"].get(top_category, 0)
            
            if top_percentage > 40:
                insights.append(f"üí° –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤: {top_category} ({top_percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        category_count = len(category_analysis.get("by_amount", []))
        if category_count < 3:
            insights.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
        mean_amount = stats.get("mean", 0)
        if mean_amount > 100:
            insights.append(f"üìä –í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${mean_amount:.2f}")
        elif mean_amount < 20:
            insights.append(f"üìä –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${mean_amount:.2f}")
        
        return insights
    
    async def analyze_income_trends(self, transactions: List[Dict[str, Any]], 
                                  period_days: int = 30) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤
        
        Args:
            transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            period_days: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            
        Returns:
            Dict: –ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤
        """
        try:
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ {period_days} –¥–Ω–µ–π...")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=period_days)
            
            income_transactions = [
                t for t in transactions
                if t.get("amount", 0) > 0 and 
                self._parse_date(t.get("transaction_date", "")) >= start_date
            ]
            
            if not income_transactions:
                return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞
            source_analysis = {}
            for transaction in income_transactions:
                source = transaction.get("description", "Unknown")
                amount = transaction["amount"]
                source_analysis[source] = source_analysis.get(source, 0) + amount
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            amounts = [t["amount"] for t in income_transactions]
            stats = {
                "total_income": sum(amounts),
                "mean_income": statistics.mean(amounts),
                "income_count": len(amounts),
                "sources": len(source_analysis)
            }
            
            result = {
                "period": {
                    "start_date": start_date.isoformat(),
                    "end_date": end_date.isoformat(),
                    "days": period_days
                },
                "statistics": stats,
                "sources": source_analysis,
                "insights": await self._generate_income_insights(stats, source_analysis)
            }
            
            logger.info("–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Ö–æ–¥–æ–≤: {e}")
            return {"error": str(e)}
    
    async def _generate_income_insights(self, stats: Dict, sources: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –ø–æ –¥–æ—Ö–æ–¥–∞–º"""
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_count = stats.get("sources", 0)
        if source_count == 1:
            insights.append("‚ö†Ô∏è –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.")
        elif source_count > 3:
            insights.append("‚úÖ –•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        total_income = stats.get("total_income", 0)
        if total_income > 0:
            insights.append(f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${total_income:.2f}")
        
        return insights
    
    def _parse_date(self, date_str: str) -> Optional[date]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            if isinstance(date_str, str):
                return datetime.fromisoformat(date_str).date()
            elif isinstance(date_str, date):
                return date_str
            return None
        except:
            return None
    
    async def get_financial_health_score(self, financial_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
        
        Args:
            financial_data: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict: –ë–∞–ª–ª –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        try:
            score = 0
            max_score = 100
            factors = []
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            income = financial_data.get("total_income", 0)
            expenses = financial_data.get("total_expenses", 0)
            
            if income > 0:
                expense_ratio = expenses / income
                if expense_ratio < 0.5:
                    score += 30
                    factors.append("–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                elif expense_ratio < 0.7:
                    score += 20
                    factors.append("–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                elif expense_ratio < 0.9:
                    score += 10
                    factors.append("–ü—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                else:
                    factors.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
            savings = income - expenses
            if savings > 0:
                savings_ratio = savings / income
                if savings_ratio > 0.2:
                    score += 25
                    factors.append("–û—Ç–ª–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π")
                elif savings_ratio > 0.1:
                    score += 15
                    factors.append("–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π")
                else:
                    factors.append("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
            category_count = len(financial_data.get("categories", []))
            if category_count > 5:
                score += 15
                factors.append("–•–æ—Ä–æ—à–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
            elif category_count > 3:
                score += 10
                factors.append("–£–º–µ—Ä–µ–Ω–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if financial_data.get("income_stability") == "stable":
                score += 20
                factors.append("–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–æ—Ö–æ–¥—ã")
            
            # –ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            investments = financial_data.get("total_investments", 0)
            if investments > 0:
                score += 10
                factors.append("–ù–∞–ª–∏—á–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
            
            return {
                "score": min(score, max_score),
                "max_score": max_score,
                "grade": self._get_grade(score),
                "factors": factors,
                "recommendations": await self._get_recommendations(score, factors)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–∞: {e}")
            return {"error": str(e)}
    
    def _get_grade(self, score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—É–∫–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        if score >= 90:
            return "A+"
        elif score >= 80:
            return "A"
        elif score >= 70:
            return "B+"
        elif score >= 60:
            return "B"
        elif score >= 50:
            return "C"
        else:
            return "D"
    
    async def _get_recommendations(self, score: int, factors: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–ª–∞"""
        recommendations = []
        
        if score < 50:
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
        elif score < 70:
            recommendations.append("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏")
        elif score < 85:
            recommendations.append("‚úÖ –•–æ—Ä–æ—à–µ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            recommendations.append("üéâ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!")
        
        return recommendations


