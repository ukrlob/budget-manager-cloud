const API_BASE = 'http://127.0.0.1:8004';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
let customRates = {
    'USD': 1,     // USD –∫ USD (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
    'CAD': 1.35,  // CAD –∫ USD
    'EUR': 0.85,  // EUR –∫ USD
    'UAH': 41.0,  // UAH –∫ USD
    'RUB': 83.0   // RUB –∫ USD
};

// Wait for DOM to load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Plaid page loaded, initializing...');
    
    // Initialize Plaid page
    loadPlaidUsage();
    loadExchangeRates();
    loadBanksForManagement();
});

// API call helper
async function apiCall(endpoint, options = {}) {
    console.log(`Making API call to: ${API_BASE}${endpoint}`);
    
    try {
        const response = await fetch(`${API_BASE}${endpoint}`, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        console.log(`Response status: ${response.status}`);
        console.log(`Response headers:`, response.headers);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const contentType = response.headers.get('content-type');
        console.log(`Content-Type: ${contentType}`);
        
        if (contentType && contentType.includes('application/json')) {
            const data = await response.json();
            console.log('API response:', data);
            return data;
        } else {
            const text = await response.text();
            console.log('API response (text):', text);
            return text;
        }
    } catch (error) {
        console.error(`API call failed: ${endpoint}`, error);
        throw error;
    }
}

// Load Plaid usage counter
async function loadPlaidUsage() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ Plaid API...');
    
    try {
        const data = await apiCall('/api/banks/plaid/usage');
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞ Plaid –∏–∑ –∫—ç—à–∞:', data);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã)
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã):', data);
        updatePlaidCounter(data);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ Plaid:', error);
    }
}

// Update Plaid counter UI
function updatePlaidCounter(data) {
    const usedElement = document.getElementById('plaid-used');
    const limitElement = document.getElementById('plaid-limit');
    const counterElement = document.getElementById('plaidCounter');
    
    if (usedElement) {
        usedElement.textContent = data.used || 0;
    } else {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç plaid-used –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    if (limitElement) {
        limitElement.textContent = data.limit || 100;
    } else {
        console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç plaid-limit –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
    
    if (counterElement) {
        counterElement.textContent = `${data.used || 0}/${data.limit || 100}`;
    }
}

// Refresh Plaid counter
async function refreshPlaidCounter() {
    const button = document.querySelector('.refresh-plaid');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    button.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    button.disabled = true;
    
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Plaid API...');
        
        // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const response = await fetch(`${API_BASE}/api/banks/plaid/refresh`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Plaid API –æ–±–Ω–æ–≤–ª–µ–Ω:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        await loadPlaidUsage();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Plaid API:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Plaid API: ' + error.message);
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        button.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
        button.disabled = false;
    }
}

// Load exchange rates
async function loadExchangeRates() {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ö–£–†–°–û–í –í–ê–õ–Æ–¢');
    
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API: https://api.exchangerate-api.com/v4/latest/USD');
        
        const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω—ã:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã:');
        console.log('CAD:', data.rates.CAD);
        console.log('EUR:', data.rates.EUR);
        console.log('UAH:', data.rates.UAH);
        console.log('RUB:', data.rates.RUB);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º USD –∫–∞–∫ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É
        customRates.USD = 1;
        console.log('‚úÖ USD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', customRates.USD);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
        if (data.rates.CAD) {
            customRates.CAD = data.rates.CAD;
            console.log('‚úÖ CAD –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.CAD);
        }
        if (data.rates.EUR) {
            customRates.EUR = data.rates.EUR;
            console.log('‚úÖ EUR –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.EUR);
        }
        if (data.rates.UAH) {
            customRates.UAH = data.rates.UAH;
            console.log('‚úÖ UAH –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.UAH);
        }
        if (data.rates.RUB) {
            customRates.RUB = data.rates.RUB;
            console.log('‚úÖ RUB –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.RUB);
        }
        
        console.log('‚úÖ –í–°–ï –ö–£–†–°–´ –û–ë–ù–û–í–õ–ï–ù–´:', customRates);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º UI...');
        updateRatesUI();
        console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
    }
}

// Update rates UI
function updateRatesUI() {
    for (let i = 1; i <= 4; i++) {
        updateCurrencyPair(i);
    }
}

// Update currency pair
function updateCurrencyPair(pairNumber) {
    const fromSelect = document.getElementById(`from${pairNumber}`);
    const toSelect = document.getElementById(`to${pairNumber}`);
    const rateElement = document.getElementById(`rate${pairNumber}`);
    
    if (!fromSelect || !toSelect || !rateElement) {
        console.log(`–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—ã ${pairNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
    }
    
    const fromCurrency = fromSelect.value;
    const toCurrency = toSelect.value;
    
    if (customRates[fromCurrency] && customRates[toCurrency]) {
        const rate = customRates[toCurrency] / customRates[fromCurrency];
        rateElement.textContent = rate.toFixed(4);
    } else {
        rateElement.textContent = 'N/A';
    }
}

// Refresh exchange rates
function refreshExchangeRates() {
    loadExchangeRates();
}

// Load banks for management
async function loadBanksForManagement() {
    console.log('üè¶ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–Ω–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    
    try {
        console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∫–æ–≤ —Å http://127.0.0.1:8004/api/banks/status');
        const statusData = await apiCall('/api/banks/status');
        console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', statusData.status);
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∫–æ–≤:', statusData.data);
        
        const banksGrid = document.getElementById('banksGrid');
        if (!banksGrid) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä banksGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        if (!statusData.data || statusData.data.length === 0) {
            banksGrid.innerHTML = '<div class="no-banks">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤</div>';
            return;
        }
        
        let banksHTML = '';
        
        for (const bank of statusData.data) {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞: ${bank.name} (${bank.code})`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            let accountsData = null;
            
            if (bank.code === 'RBC') {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Royal Bank of Canada (RBC)');
                accountsData = {
                    value: [
                        { name: 'RBC Advantage Banking', balance: 119.14, currency: 'CAD' },
                        { name: 'RBC ION Visa', balance: -58.11, currency: 'CAD' },
                        { name: 'RBC U.S. High Interest eSavings', balance: 100.82, currency: 'USD' },
                        { name: 'RBC High Interest eSavings', balance: 2000, currency: 'CAD' },
                        { name: 'RBC Advantage Banking', balance: 1403.6, currency: 'CAD' }
                    ]
                };
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', accountsData.value.length, '—Å—á–µ—Ç–æ–≤ –¥–ª—è Royal Bank of Canada');
            } else if (bank.code === 'BMO') {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Bank of Montreal (BMO)');
                accountsData = {
                    value: [
                        { name: 'MasterCard', balance: 7500.02, currency: 'CAD' },
                        { name: 'Chequing', balance: 100, currency: 'CAD' }
                    ]
                };
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', accountsData.value.length, '—Å—á–µ—Ç–æ–≤ –¥–ª—è Bank of Montreal');
            } else if (bank.code === 'WALMART') {
                console.log('üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Walmart Rewards (WALMART)');
                accountsData = {
                    value: [
                        { name: 'World Mastercard', balance: 2000, currency: 'CAD' }
                    ]
                };
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', accountsData.value.length, '—Å—á–µ—Ç–æ–≤ –¥–ª—è Walmart Rewards');
            } else {
                console.log('‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è', bank.name);
                accountsData = { value: [] };
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            let totalBalance = 0;
            if (accountsData && accountsData.value) {
                totalBalance = accountsData.value.reduce((sum, account) => sum + (account.balance || 0), 0);
            }
            console.log('üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å', bank.name + ':', totalBalance);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∫–∞
            const statusClass = bank.status === 'active' ? 'working' : 'error';
            const statusText = bank.status === 'active' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—à–∏–±–∫–∞';
            const accountCount = accountsData ? accountsData.value.length : 0;
            const lastTransaction = bank.last_transaction || '–ù–µ—Ç';
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è —Å—á–µ—Ç–æ–≤
            let accountsHTML = '';
            if (accountsData && accountsData.value && accountsData.value.length > 0) {
                accountsHTML = '<div class="accounts-list">';
                accountsData.value.forEach(account => {
                    accountsHTML += `
                        <div class="account-item">
                            <div class="account-name">${account.name}</div>
                            <div class="account-balance">${account.balance.toFixed(2)} ${account.currency}</div>
                        </div>
                    `;
                });
                accountsHTML += '</div>';
            }
            
            banksHTML += `
                <div class="bank-card">
                    <div class="bank-header">
                        <h3>${bank.name}</h3>
                        <div class="bank-status ${statusClass}">${statusText}</div>
                    </div>
                    <div class="bank-info">
                        <div class="bank-stats">
                            <span>–°—á–µ—Ç–æ–≤: ${accountCount}</span>
                            <span>–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${lastTransaction}</span>
                        </div>
                        ${accountsHTML}
                    </div>
                    <div class="bank-actions">
                        <button class="btn btn-secondary" onclick="refreshBank('${bank.code}')">–û–±–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn btn-secondary" onclick="viewAccounts('${bank.code}')">–°—á–µ—Ç–∞</button>
                        <button class="btn btn-secondary" onclick="viewTransactions('${bank.code}')">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</button>
                    </div>
                </div>
            `;
        }
        
        banksGrid.innerHTML = banksHTML;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤:', error);
        const banksGrid = document.getElementById('banksGrid');
        if (banksGrid) {
            banksGrid.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤</div>';
        }
    }
}

// Currency converter functions
function convertCurrencyAmount() {
    const fromCurrency = document.getElementById('fromCurrency');
    const toCurrency = document.getElementById('toCurrency');
    const amountInput = document.getElementById('amountInput');
    const resultElement = document.getElementById('converterResult');
    
    if (!fromCurrency || !toCurrency || !amountInput || !resultElement) {
        console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const amount = parseFloat(amountInput.value) || 0;
    const from = fromCurrency.value;
    const to = toCurrency.value;
    
    if (from === to) {
        resultElement.textContent = `$${amount.toFixed(2)}`;
        return;
    }
    
    if (customRates[from] && customRates[to]) {
        const convertedAmount = (amount * customRates[to]) / customRates[from];
        resultElement.textContent = `$${convertedAmount.toFixed(2)}`;
    } else {
        resultElement.textContent = '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
}

// Bank management functions
function refreshBank(bankCode) {
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞
}

function viewAccounts(bankCode) {
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç–æ–≤ –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤
}

function viewTransactions(bankCode) {
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
}

// Plaid Link function
async function openPlaidLink() {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ Plaid Link...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Plaid Link
        const response = await fetch(`${API_BASE}/api/plaid/link/config`);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const config = await response.json();
        console.log('Plaid Link –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Plaid Link
        // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert('Plaid Link –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Plaid Link:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plaid Link: ' + error.message);
    }
}

