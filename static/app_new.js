const API_BASE = 'http://127.0.0.1:8004';

// URL Router - –î–û–ü–û–õ–ù–ï–ù–ò–ï –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ù–ï –ó–ê–ú–ï–ù–ê)
class URLRouter {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è GitHub Pages
        this.basePath = window.location.pathname.includes('/budget-manager-cloud/') 
            ? '/budget-manager-cloud' 
            : '';
        
        this.routes = {
            [this.basePath + '/']: 'dashboard',
            [this.basePath + '/banks']: 'banks',
            [this.basePath + '/transactions']: 'transactions',
            [this.basePath + '/advisor']: 'advisor'
        };
        
        console.log('üîß URLRouter: basePath =', this.basePath);
        console.log('üîß URLRouter: routes =', this.routes);
        this.init();
    }

    init() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –±—Ä–∞—É–∑–µ—Ä–∞)
        window.addEventListener('popstate', (e) => {
            this.handleRoute(window.location.pathname);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ URL
        this.handleRoute(window.location.pathname);
    }

    handleRoute(path) {
        console.log(`üîç handleRoute: ${path}`);
        console.log(`üîç available routes:`, Object.keys(this.routes));
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        let tabName = this.routes[path];
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        if (!tabName) {
            for (const [route, tab] of Object.entries(this.routes)) {
                if (path.startsWith(route)) {
                    tabName = tab;
                    break;
                }
            }
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º dashboard
        if (!tabName) {
            tabName = 'dashboard';
        }
        
        console.log(`üîÑ URL Router: ${path} ‚Üí ${tabName}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é showTab - –ù–ï –ú–ï–ù–Ø–ï–ú –ï–Å
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ showTab —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        setTimeout(() => {
            if (typeof showTab === 'function') {
                showTab(tabName);
            }
        }, 0);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigateToTab(tabName) {
        const routeMap = {
            'dashboard': this.basePath + '/',
            'banks': this.basePath + '/banks',
            'transactions': this.basePath + '/transactions', 
            'advisor': this.basePath + '/advisor'
        };
        
        const path = routeMap[tabName];
        if (path) {
            history.pushState({}, '', path);
            console.log(`üîÑ Navigate to: ${path}`);
        }
    }
}

// –†–æ—É—Ç–µ—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –ü–ï–†–í–´–ú
(function() {
    const currentPage = localStorage.getItem('currentPage');
    if (currentPage === 'plaid_management' && window.location.pathname === '/') {
        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Plaid –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        window.location.href = '/plaid_management.html';
        return;
    }
})();

// Wait for DOM to load
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing app...');
    
    // Initialize app
    loadDashboard();
    
    // Initialize form handlers
    initializeFormHandlers();
    
    // Set today's date for transaction form
    const transactionDate = document.getElementById('transactionDate');
    if (transactionDate) {
        transactionDate.value = new Date().toISOString().split('T')[0];
    }
});

// Initialize form handlers
function initializeFormHandlers() {
    const bankForm = document.getElementById('bankForm');
    if (bankForm) {
        bankForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const data = {
                name: document.getElementById('bankName').value,
                country: document.getElementById('bankCountry').value,
                currency: document.getElementById('bankCurrency').value
            };
            
            const result = await apiCall('/api/banks', 'POST', data);
            if (result.error) {
                alert(`–û—à–∏–±–∫–∞: ${result.error}`);
            } else {
                alert('–ë–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                document.getElementById('bankForm').reset();
                loadBanks();
                // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
            }
        });
    }
    
    const accountForm = document.getElementById('accountForm');
    if (accountForm) {
        accountForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const data = {
                bank_id: document.getElementById('accountBank').value,
                account_name: document.getElementById('accountName').value,
                account_type: document.getElementById('accountType').value,
                balance: parseFloat(document.getElementById('accountBalance').value)
            };
            
            const result = await apiCall('/accounts', 'POST', data);
            if (result.error) {
                alert(`–û—à–∏–±–∫–∞: ${result.error}`);
            } else {
                alert('–°—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                document.getElementById('accountForm').reset();
                loadAccounts();
                // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
            }
        });
    }
    
    const transactionForm = document.getElementById('transactionForm');
    if (transactionForm) {
        transactionForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const data = {
                account_id: document.getElementById('transactionAccount').value,
                amount: parseFloat(document.getElementById('transactionAmount').value),
                description: document.getElementById('transactionDescription').value,
                category: document.getElementById('transactionCategory').value,
                date: document.getElementById('transactionDate').value
            };
            
            const result = await apiCall('/transactions', 'POST', data);
            if (result.error) {
                alert(`–û—à–∏–±–∫–∞: ${result.error}`);
            } else {
                alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                document.getElementById('transactionForm').reset();
                loadTransactions();
                // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
            }
        });
    }
}

// Tab switching
function showTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Show selected tab
    document.getElementById(tabName).classList.add('active');
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º ID –∏ –¥–µ–ª–∞–µ–º –µ—ë –∞–∫—Ç–∏–≤–Ω–æ–π
    const activeButton = document.querySelector(`[onclick*="showTab('${tabName}')"]`);
    if (activeButton) {
        activeButton.classList.add('active');
    }
    
    // –î–û–ë–ê–í–õ–Ø–ï–ú URL-–Ω–∞–≤–∏–≥–∞—Ü–∏—é - –ù–ï –ú–ï–ù–Ø–Ø —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
    // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–∞—è" - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
    if (typeof router !== 'undefined' && tabName !== 'dashboard') {
        router.navigateToTab(tabName);
    }
    
    // Load data for the tab
    if (tabName === 'dashboard') {
        // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
    } else if (tabName === 'banks') {
        setTimeout(() => loadBanksForManagement(), 100);
    } else if (tabName === 'accounts') {
        loadAccounts();
        // loadBanksForSelect('accountBank'); // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    } else if (tabName === 'transactions') {
        loadTransactions();
        // loadAccountsForSelect('transactionAccount'); // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    } else if (tabName === 'reports') {
        loadReports();
    }
}

// API calls
async function apiCall(endpoint, method = 'GET', data = null) {
    try {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
            }
        };
        
        if (data) {
            options.body = JSON.stringify(data);
        }
        
        console.log(`Making API call to: ${API_BASE}${endpoint}`);
        const response = await fetch(`${API_BASE}${endpoint}`, options);
        console.log(`Response status: ${response.status}`);
        console.log(`Response headers:`, response.headers);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const contentType = response.headers.get('content-type');
        console.log(`Content-Type: ${contentType}`);
        
        if (!contentType || !contentType.includes('application/json')) {
            const text = await response.text();
            console.error('Expected JSON but got:', contentType, text.substring(0, 200));
            throw new Error(`Expected JSON but got ${contentType}`);
        }
        
        const jsonData = await response.json();
        console.log(`API response:`, jsonData);
        return jsonData;
    } catch (error) {
        console.error('API Error:', error);
        return { error: error.message };
    }
}

// Load dashboard data
async function loadDashboard() {
    try {
        const [banks, accounts, transactions] = await Promise.all([
            apiCall('/api/banks'),
            apiCall('/accounts'),
            apiCall('/transactions')
        ]);

        // Check if elements exist before updating
        console.log('Loading dashboard data...');
        console.log('Banks:', banks);
        console.log('Accounts:', accounts);
        console.log('Transactions:', transactions);
        
        // These elements don't exist in HTML, so we skip them
        // const totalBanksElement = document.getElementById('totalBanks');
        // const totalAccountsElement = document.getElementById('totalAccounts');
        // const totalTransactionsElement = document.getElementById('totalTransactions');
        // const totalBalanceElement = document.getElementById('totalBalance');

        // Load additional data
        await loadPlaidUsage();
        await loadExchangeRates();
        await loadAssets(); // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–ë–∞–Ω–∫–∏"
        
    } catch (error) {
        console.error('Dashboard load error:', error);
    }
}

// Load banks
async function loadBanks() {
    console.log('Loading banks...');
    const data = await apiCall('/api/banks');
    console.log('Banks data:', data);
    
    const banksGrid = document.getElementById('banksGrid');
    
    if (!banksGrid) {
        console.log('banksGrid element not found');
        return;
    }
    
    if (data.error) {
        banksGrid.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
        return;
    }
    
    if (data.banks && data.banks.length > 0) {
        let html = '';
        data.banks.forEach(bank => {
            html += `
            <div class="bank-card">
                <div class="bank-header">
                    <div class="bank-name">${bank.name}</div>
                    <div class="bank-balance">${bank.currency} 0.00</div>
                </div>
                <div class="accounts-list">
                    <div class="account-item">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</div>
                </div>
            </div>`;
        });
        banksGrid.innerHTML = html;
    } else {
        banksGrid.innerHTML = '<div class="loading">–ù–µ—Ç –±–∞–Ω–∫–æ–≤</div>';
    }
}

// Load accounts
async function loadAccounts() {
    const data = await apiCall('/accounts');
    const accountsList = document.getElementById('accountsList');
    
    if (data.error) {
        accountsList.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
        return;
    }
    
    if (data.accounts && data.accounts.length > 0) {
        let html = '<table class="data-table"><tr><th>ID</th><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ë–∞–Ω–∫</th><th>–ë–∞–ª–∞–Ω—Å</th><th>–í–∞–ª—é—Ç–∞</th></tr>';
        data.accounts.forEach(account => {
            html += `<tr>
                <td>${account.id}</td>
                <td>${account.account_name}</td>
                <td>${account.bank_name}</td>
                <td>${parseFloat(account.balance).toFixed(2)}</td>
                <td>${account.currency}</td>
            </tr>`;
        });
        html += '</table>';
        accountsList.innerHTML = html;
    } else {
        accountsList.innerHTML = '<div class="loading">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</div>';
    }
}

// Load transactions
async function loadTransactions() {
    const data = await apiCall('/transactions');
    const transactionsStats = document.getElementById('transactionsStats');
    
    if (!transactionsStats) {
        console.log('transactionsStats element not found');
        return;
    }
    
    if (data.error) {
        transactionsStats.innerHTML = `<div class="error">–û—à–∏–±–∫–∞: ${data.error}</div>`;
        return;
    }
    
    if (data.transactions && data.transactions.length > 0) {
        let html = '<div class="transactions-summary">';
        html += `<h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h3>`;
        html += `<p>–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.transactions.length}</p>`;
        html += '</div>';
        transactionsStats.innerHTML = html;
    } else {
        transactionsStats.innerHTML = '<div class="loading">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>';
    }
}

// Load reports
async function loadReports() {
    const [balanceData, statsData] = await Promise.all([
        apiCall('/reports/balance'),
        apiCall('/stats/summary')
    ]);
    
    // Balance report
    const balanceReport = document.getElementById('balanceReport');
    if (balanceData.balance_report && balanceData.balance_report.length > 0) {
        let html = '<table class="data-table"><tr><th>–ë–∞–Ω–∫</th><th>–í–∞–ª—é—Ç–∞</th><th>–ë–∞–ª–∞–Ω—Å</th><th>–°—á–µ—Ç–æ–≤</th></tr>';
        balanceData.balance_report.forEach(row => {
            html += `<tr>
                <td>${row.bank_name}</td>
                <td>${row.currency}</td>
                <td>${parseFloat(row.total_balance).toFixed(2)}</td>
                <td>${row.account_count}</td>
            </tr>`;
        });
        html += '</table>';
        balanceReport.innerHTML = html;
    } else {
        balanceReport.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
    }
    
    // Summary stats
    const summaryStats = document.getElementById('summaryStats');
    if (statsData.total_transactions !== undefined) {
        let html = '<div class="stats">';
        html += `<div class="stat-card"><div class="stat-number">${statsData.total_transactions}</div><div class="stat-label">–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div></div>`;
        
        if (statsData.balance_by_currency && statsData.balance_by_currency.length > 0) {
            statsData.balance_by_currency.forEach(currency => {
                html += `<div class="stat-card"><div class="stat-number">${parseFloat(currency.total_balance).toFixed(2)}</div><div class="stat-label">${currency.currency}</div></div>`;
            });
        }
        
        html += '</div>';
        summaryStats.innerHTML = html;
    } else {
        summaryStats.innerHTML = '<div class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
    }
}

// Load banks for select
async function loadBanksForSelect(selectId) {
    const data = await apiCall('/api/banks');
    const select = document.getElementById(selectId);
    
    if (!select) {
        console.log(`Select element with id '${selectId}' not found`);
        return;
    }
    
    if (data.banks) {
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫</option>';
        data.banks.forEach(bank => {
            select.innerHTML += `<option value="${bank.id}">${bank.name} (${bank.currency})</option>`;
        });
    }
}

// Load accounts for select
async function loadAccountsForSelect(selectId) {
    const data = await apiCall('/accounts');
    const select = document.getElementById(selectId);
    
    if (!select) {
        console.log(`Element with id ${selectId} not found`);
        return;
    }
    
    if (data.accounts) {
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>';
        data.accounts.forEach(account => {
            select.innerHTML += `<option value="${account.id}">${account.account_name} (${account.bank_name})</option>`;
        });
    }
}

// Form handlers - MOVED TO initializeFormHandlers() function
// const bankForm = document.getElementById('bankForm');
/*
if (bankForm) {
    bankForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const data = {
        name: document.getElementById('bankName').value,
        country: document.getElementById('bankCountry').value,
        currency: document.getElementById('bankCurrency').value
    };
    
    const result = await apiCall('/banks', 'POST', data);
    
    if (result.error) {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    } else {
        alert('–ë–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        document.getElementById('bankForm').reset();
        loadBanks();
        // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
    }
});
}
*/

/*
const accountForm = document.getElementById('accountForm');
if (accountForm) {
    accountForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const data = {
        bank_id: parseInt(document.getElementById('accountBank').value),
        account_name: document.getElementById('accountName').value,
        account_number: document.getElementById('accountNumber').value,
        balance: parseFloat(document.getElementById('accountBalance').value),
        currency: document.getElementById('accountCurrency').value
    };
    
    const result = await apiCall('/accounts', 'POST', data);
    
    if (result.error) {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    } else {
        alert('–°—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        document.getElementById('accountForm').reset();
        loadAccounts();
        // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
    }
});
}
*/

/*
const transactionForm = document.getElementById('transactionForm');
if (transactionForm) {
    transactionForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const data = {
        account_id: parseInt(document.getElementById('transactionAccount').value),
        amount: parseFloat(document.getElementById('transactionAmount').value),
        description: document.getElementById('transactionDescription').value,
        category: document.getElementById('transactionCategory').value,
        transaction_date: document.getElementById('transactionDate').value
    };
    
    const result = await apiCall('/transactions', 'POST', data);
    
    if (result.error) {
        alert(`–û—à–∏–±–∫–∞: ${result.error}`);
    } else {
        alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        document.getElementById('transactionForm').reset();
        loadTransactions();
        // loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
    }
});
}
*/

// Set today's date for transaction form - MOVED TO initializeFormHandlers()
/*
const transactionDate = document.getElementById('transactionDate');
if (transactionDate) {
    transactionDate.value = new Date().toISOString().split('T')[0];
}
*/

// Load Plaid usage counter
async function loadPlaidUsage() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç—á–∏–∫ Plaid API...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        const usageResponse = await fetch(`${API_BASE}/api/banks/plaid/usage`);
        const usageData = await usageResponse.json();
        
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞ Plaid –∏–∑ –∫—ç—à–∞:', usageData);
        
        if (usageData.error) {
            console.error('Plaid usage error:', usageData.error);
            return;
        }
        
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Plaid
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã):', usageData);
        updatePlaidCounter(usageData.used, usageData.limit);
        
    } catch (error) {
        console.error('Error loading Plaid usage:', error);
        // Set default values on error
        updatePlaidCounter(7, 100);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ Plaid –≤ UI
function updatePlaidCounter(used, limit) {
        const plaidUsedElement = document.getElementById('plaid-used');
        const plaidLimitElement = document.getElementById('plaid-limit');
        
        if (plaidUsedElement) {
        plaidUsedElement.textContent = used || 0;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫: ${used}/${limit}`);
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç plaid-used –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        if (plaidLimitElement) {
        plaidLimitElement.textContent = limit || 100;
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç plaid-limit –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function goHome() {
    // –û—á–∏—â–∞–µ–º localStorage –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    localStorage.removeItem('currentPage');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const currentPath = window.location.pathname;
    const isOnGitHubPages = currentPath.includes('/budget-manager-cloud/');
    
    console.log('üîç goHome() - currentPath:', currentPath);
    console.log('üîç goHome() - isOnGitHubPages:', isOnGitHubPages);
    
    if (isOnGitHubPages) {
        // –ú—ã –Ω–∞ GitHub Pages - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
        console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É GitHub Pages');
        window.location.href = '/budget-manager-cloud/';
    } else {
        // –ú—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)');
        window.location.href = '/';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
function goHomeNoURL() {
    console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è URL');
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É dashboard
    showTab('dashboard');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async function loadExchangeRates() {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ö–£–†–°–û–í –í–ê–õ–Æ–¢');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π API
    const apiUrl = 'https://api.exchangerate-api.com/v4/latest/USD';
    
    try {
        console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å API: ${apiUrl}`);
        const response = await fetch(apiUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω—ã:', data);
        
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ data.rates
        const rates = data.rates;
        if (!rates) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö');
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã:');
        console.log('CAD:', rates.CAD);
        console.log('EUR:', rates.EUR);
        console.log('UAH:', rates.UAH);
        console.log('RUB:', rates.RUB);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç USD -> –≤–∞–ª—é—Ç–∞)
        // USD –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–µ–Ω 1 (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
        customRates.USD = 1;
        console.log('‚úÖ USD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', customRates.USD);
        
        if (rates.CAD) {
            customRates.CAD = rates.CAD;
            console.log('‚úÖ CAD –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.CAD);
        }
        if (rates.EUR) {
            customRates.EUR = rates.EUR;
            console.log('‚úÖ EUR –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.EUR);
        }
        if (rates.UAH) {
            customRates.UAH = rates.UAH;
            console.log('‚úÖ UAH –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.UAH);
        }
        if (rates.RUB) {
            customRates.RUB = rates.RUB;
            console.log('‚úÖ RUB –æ–±–Ω–æ–≤–ª–µ–Ω:', customRates.RUB);
        }
        
        console.log('‚úÖ –í–°–ï –ö–£–†–°–´ –û–ë–ù–û–í–õ–ï–ù–´:', customRates);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º UI...');
        updateRatesUI();
        console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω');
        
    } catch (error) {
        console.error(`‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:`, error.message);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:', customRates);
        updateRatesUI();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
function updateRatesUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã –≤–∞–ª—é—Ç
    for (let i = 1; i <= 4; i++) {
        updateCurrencyPair(i);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
function refreshRates() {
    const button = document.querySelector('.refresh-rates');
    button.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    button.disabled = true;
    
    loadExchangeRates().finally(() => {
        button.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
        button.disabled = false;
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ Plaid API
async function refreshPlaidCounter() {
    const button = document.querySelector('.refresh-plaid');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    button.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    button.disabled = true;
    
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Plaid API...');
        
        // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const response = await fetch(`${API_BASE}/api/banks/plaid/refresh`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const data = await response.json();
        console.log('–û—Ç–≤–µ—Ç –æ—Ç Plaid refresh:', data);
        
        if (data.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            updatePlaidCounter(data.used, data.limit);
            
            console.log(`–°—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.used}/${data.limit}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            button.textContent = '–û–±–Ω–æ–≤–ª–µ–Ω–æ!';
            
            // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setTimeout(() => {
                button.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
                button.disabled = false;
            }, 2000);
            
        } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Plaid API:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        button.textContent = '–û—à–∏–±–∫–∞!';
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(() => {
            button.textContent = '–û–±–Ω–æ–≤–∏—Ç—å';
            button.disabled = false;
        }, 2000);
    }
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
let assetsLoading = false;

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–ë–∞–Ω–∫–∏")
async function loadAssets() {
    if (assetsLoading) {
        console.log('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
            return;
        }
        
    assetsLoading = true;
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∏ "–ë–∞–Ω–∫–∏"...');
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ –∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ë–∞–Ω–∫–∏"
        console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∫–æ–≤ —Å ${API_BASE}/api/banks/status`);
        const statusResponse = await fetch(`${API_BASE}/api/banks/status`);
        console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', statusResponse.status);
        
        if (!statusResponse.ok) {
            console.error('–û—à–∏–±–∫–∞ HTTP:', statusResponse.status, statusResponse.statusText);
            return;
        }
        
        const banksData = await statusResponse.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∫–æ–≤:', banksData);
        
        if (!banksData || banksData.length === 0) {
            console.log('–ù–µ—Ç –±–∞–Ω–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∞–Ω–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        const regions = {
            canada: { banks: [], totalBalance: 0 },
            ukraine: { banks: [], totalBalance: 0 },
            other: { banks: [], totalBalance: 0 },
            investments: { banks: [], totalBalance: 0 }
        };
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞
        for (const bank of banksData) {
            console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–Ω–∫–∞: ${bank.name} (${bank.code})`);
            
            const bankInfo = {
                id: bank.code,
                name: bank.name,
                accounts: [],
                totalBalance: 0
            };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–ï–°–¢–û–í–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ù–ï –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Plaid
            console.log(`üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${bank.name} (${bank.code})`);
            
            // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if (bank.code === 'RBC') {
                bankInfo.accounts = [
                    { id: '1', name: 'RBC Advantage Banking', balance: '119.14', currency: 'CAD' },
                    { id: '2', name: 'RBC ION Visa', balance: '60.42', currency: 'CAD' },
                    { id: '3', name: 'RBC U.S. High Interest eSavings', balance: '100.82', currency: 'USD' },
                    { id: '4', name: 'RBC High Interest eSavings', balance: '3004.68', currency: 'CAD' },
                    { id: '5', name: 'RBC Advantage Banking', balance: '1477.60', currency: 'CAD' }
                ];
                console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${bankInfo.accounts.length} —Å—á–µ—Ç–æ–≤ –¥–ª—è ${bank.name}`);
            } else if (bank.code === 'BMO') {
                bankInfo.accounts = [
                    { id: '6', name: 'MasterCard', balance: '7500.00', currency: 'CAD' },
                    { id: '7', name: 'Chequing', balance: '100.00', currency: 'CAD' }
                ];
                console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${bankInfo.accounts.length} —Å—á–µ—Ç–æ–≤ –¥–ª—è ${bank.name}`);
            } else {
                bankInfo.accounts = [];
                console.log(`‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${bank.name}`);
            }
            
            bankInfo.totalBalance = bankInfo.accounts.reduce((sum, account) => {
                const balance = parseFloat(account.balance) || 0;
                            return sum + balance;
                        }, 0);
            
                        console.log(`üíµ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å ${bank.name}: ${bankInfo.totalBalance}`);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
            if (bank.name.includes('Royal Bank of Canada') || bank.name.includes('RBC') || 
                bank.name.includes('Bank of Montreal') || bank.name.includes('BMO') || 
                bank.name.includes('Walmart Rewards') || bank.name.includes('WALMART') ||
                bank.name.includes('Canadian Imperial Bank of Commerce') || bank.name.includes('CIBC')) {
                regions.canada.banks.push(bankInfo);
                regions.canada.totalBalance += bankInfo.totalBalance;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –ö–∞–Ω–∞–¥—É: ${bank.name} —Å –±–∞–ª–∞–Ω—Å–æ–º ${bankInfo.totalBalance}`);
            } else if (bank.name.includes('PrivatBank') || bank.name.includes('Monobank') || 
                       bank.name.includes('Raiffeisen') || bank.name.includes('PUMB')) {
                regions.ukraine.banks.push(bankInfo);
                regions.ukraine.totalBalance += bankInfo.totalBalance;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –£–∫—Ä–∞–∏–Ω—É: ${bank.name} —Å –±–∞–ª–∞–Ω—Å–æ–º ${bankInfo.totalBalance}`);
            } else if (bank.name.includes('Interactive Brokers') || bank.name.includes('Investment')) {
                regions.investments.banks.push(bankInfo);
                regions.investments.totalBalance += bankInfo.totalBalance;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${bank.name} —Å –±–∞–ª–∞–Ω—Å–æ–º ${bankInfo.totalBalance}`);
            } else {
                regions.other.banks.push(bankInfo);
                regions.other.totalBalance += bankInfo.totalBalance;
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –î—Ä—É–≥–∏–µ: ${bank.name} —Å –±–∞–ª–∞–Ω—Å–æ–º ${bankInfo.totalBalance}`);
            }
        }
        
        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:', regions);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log('üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ç–∏–≤—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º...');
        displayRegionAssets('canada', regions.canada);
        displayRegionAssets('ukraine', regions.ukraine);
        displayRegionAssets('other', regions.other);
        displayRegionAssets('investments', regions.investments);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –≤–∞–ª—é—Ç (–æ—Ç–∫–ª—é—á–µ–Ω–æ - —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
        // setTimeout(() => {
        //     convertCurrency('canada', 'CAD');
        //     convertCurrency('ukraine', 'UAH');
        //     convertCurrency('other', 'USD');
        //     convertCurrency('investments', 'USD');
        // }, 1000);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–æ–≤:', error);
    } finally {
        assetsLoading = false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞
function displayRegionAssets(regionId, regionData) {
    console.log(`üé® –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${regionId}:`, regionData);
    const container = document.getElementById(`${regionId}-banks`);
    
    if (!container) {
        console.error(`‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${regionId}-banks –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return;
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–Ω–∫–∏
    if (regionData.banks.length === 0) {
        container.innerHTML = `
            <div class="loading-state">
                <div>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤</div>
            </div>
        `;
        return;
    }
    
    let html = '';
    for (const bank of regionData.banks) {
        const currency = regionId === 'ukraine' ? '‚Ç¥' : '$';
        const currencyCode = regionId === 'ukraine' ? 'UAH' : 
                           regionId === 'canada' ? 'CAD' : 'USD';
        
        html += `
            <div class="bank-card">
                <div class="bank-header">
                    <div class="bank-name">${bank.name}</div>
                </div>
                <div class="accounts-list">
                    ${bank.accounts.length > 0 ? 
                        bank.accounts.map(account => `
                            <div class="account-item">
                                <div class="account-name">${account.name || '–°—á–µ—Ç'}</div>
                                <div class="account-balance">${currency}${(parseFloat(account.balance) || 0).toFixed(2)} ${account.currency || currencyCode}</div>
                                <div class="account-converter">
                                    <select onchange="convertAccountCurrency('${regionId}', '${bank.id}', '${account.id || 'default'}', this.value)">
                                        <option value="">–í –≤–∞–ª—é—Ç–µ</option>
                                        ${getCurrencyOptions(account.currency || currencyCode)}
                                    </select>
                                    <div class="account-converted-balance" id="converted-${regionId}-${bank.id}-${account.id || 'default'}">${currency}${(parseFloat(account.balance) || 0).toFixed(2)}</div>
                                </div>
                            </div>
                        `).join('') :
                        '<div class="loading-state">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</div>'
                    }
                </div>
            </div>
        `;
    }
    
    container.innerHTML = html;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –≤–∞–ª—é—Ç –±–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã
function getCurrencyOptions(originalCurrency) {
    const allCurrencies = ['USD', 'EUR', 'CAD', 'UAH', 'RUB'];
    const filteredCurrencies = allCurrencies.filter(currency => currency !== originalCurrency);
    
    return filteredCurrencies.map(currency => 
        `<option value="${currency}">${currency}</option>`
    ).join('');
}

// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
function convertAccountCurrency(regionId, bankId, accountId, targetCurrency) {
    const convertedElement = document.getElementById(`converted-${regionId}-${bankId}-${accountId}`);
    if (!convertedElement) {
        console.log(`–≠–ª–µ–º–µ–Ω—Ç converted-${regionId}-${bankId}-${accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í –≤–∞–ª—é—Ç–µ" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (!targetCurrency) {
        const accountItem = convertedElement.closest('.account-item');
        const balanceText = accountItem.querySelector('.account-balance').textContent;
        convertedElement.textContent = balanceText;
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞
    const accountItem = convertedElement.closest('.account-item');
    const balanceText = accountItem.querySelector('.account-balance').textContent;
    const balance = parseFloat(balanceText.replace(/[^\d.-]/g, ''));
    
    if (isNaN(balance)) {
        console.log(`–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balanceText}`);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
    const originalCurrency = balanceText.match(/[A-Z]{3}/)?.[0] || 'CAD';
    
    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${balance} ${originalCurrency} –≤ ${targetCurrency}`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:', customRates);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    if (!customRates[originalCurrency] || !customRates[targetCurrency]) {
        console.log(`–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${originalCurrency}=${customRates[originalCurrency]}, ${targetCurrency}=${customRates[targetCurrency]}`);
        convertedElement.textContent = 'N/A';
        return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: originalCurrency -> USD -> targetCurrency
    const usdAmount = balance / customRates[originalCurrency];
    const convertedAmount = usdAmount * customRates[targetCurrency];
    
    if (isNaN(convertedAmount)) {
        console.log('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        convertedElement.textContent = 'N/A';
        return;
    }
    
    const currencySymbol = targetCurrency === 'UAH' ? '‚Ç¥' : 
                          targetCurrency === 'EUR' ? '‚Ç¨' : '$';
    
    convertedElement.textContent = `${currencySymbol}${convertedAmount.toFixed(2)}`;
    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${convertedAmount.toFixed(2)} ${targetCurrency}`);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function convertCurrency(regionId, targetCurrency) {
    const balanceElement = document.getElementById(`${regionId}-balance`);
    const convertedElement = document.getElementById(`${regionId}-converted`);
    
    if (!balanceElement || !convertedElement) {
        console.log(`–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è ${regionId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    const balanceText = balanceElement.textContent;
    const balance = parseFloat(balanceText.replace(/[^\d.-]/g, ''));
    
    if (isNaN(balance)) {
        console.log(`–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è ${regionId}`);
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:', customRates);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É —Ä–µ–≥–∏–æ–Ω–∞
    let sourceCurrency = 'USD';
    if (regionId === 'canada') sourceCurrency = 'CAD';
    else if (regionId === 'ukraine') sourceCurrency = 'UAH';
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: sourceCurrency -> USD -> targetCurrency
    if (!customRates[sourceCurrency] || !customRates[targetCurrency]) {
        convertedElement.textContent = 'N/A';
        return;
    }
    
    const usdAmount = balance / customRates[sourceCurrency];
    const convertedAmount = usdAmount * customRates[targetCurrency];
    
    if (isNaN(convertedAmount)) {
        convertedElement.textContent = 'N/A';
        return;
    }
    
    const currencySymbol = targetCurrency === 'UAH' ? '‚Ç¥' : 
                          targetCurrency === 'EUR' ? '‚Ç¨' : 
                          targetCurrency === 'RUB' ? '‚ÇΩ' : '$';
    
    convertedElement.textContent = `${currencySymbol}${convertedAmount.toFixed(2)}`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
function sendAdvisorMessage() {
    const input = document.getElementById('advisor-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    const messagesContainer = document.getElementById('advisor-messages');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = document.createElement('div');
    userMessage.className = 'message user-message';
    userMessage.innerHTML = `<strong>–í—ã:</strong> ${message}`;
    messagesContainer.appendChild(userMessage);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    input.value = '';
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
    setTimeout(() => {
        const advisorMessage = document.createElement('div');
        advisorMessage.className = 'message advisor-message';
        advisorMessage.innerHTML = `<strong>–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç:</strong> –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä–æ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.`;
        messagesContainer.appendChild(advisorMessage);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }, 1000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–Ω–∫–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ë–∞–Ω–∫–∏"
async function loadBanksForManagement() {
    console.log('üè¶ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∞–Ω–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    try {
        console.log(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∫–æ–≤ —Å ${API_BASE}/api/banks/status`);
        const response = await fetch(`${API_BASE}/api/banks/status`);
        console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
        const banksData = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–Ω–∫–æ–≤:', banksData);
        
        const banksGrid = document.getElementById('banksGrid');
        
        if (!banksGrid) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç banksGrid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        if (!banksData || banksData.length === 0) {
            banksGrid.innerHTML = '<div class="empty-state">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤</div>';
            return;
        }
        
        let html = '';
        
        for (const bank of banksData) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞–Ω–∫–∞
            let accounts = [];
            try {
                const accountsResponse = await fetch(`${API_BASE}/api/banks/${bank.code}/accounts`);
                const accountsData = await accountsResponse.json();
                accounts = accountsData || [];
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤ –¥–ª—è ${bank.name}:`, error);
            }
            
            const statusClass = bank.status === 'working' ? 'working' : 'error';
            const statusText = bank.status === 'working' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—à–∏–±–∫–∞';
            
            html += `
                <div class="bank-card">
                    <div class="bank-header">
                        <div class="bank-name">${bank.name}</div>
                        <div class="bank-status ${statusClass}">${statusText}</div>
                    </div>
                    
                    <div class="bank-info">
                        <div class="info-item">
                            <div class="info-label">–°—á–µ—Ç–æ–≤</div>
                            <div class="info-value">${bank.accounts_count}</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</div>
                            <div class="info-value">${bank.last_transaction_date || '–ù–µ—Ç'}</div>
                        </div>
                    </div>
                    
                    ${accounts.length > 0 ? `
                        <div class="accounts-section">
                            <div class="accounts-title">–°—á–µ—Ç–∞:</div>
                            ${accounts.map(account => `
                                <div class="account-item">
                                    <div class="account-name">${account.name}</div>
                                    <div class="account-balance">${account.balance} ${account.currency}</div>
                                </div>
                            `).join('')}
                        </div>
                    ` : ''}
                    
                    <div class="bank-actions">
                        <button class="btn-small btn-refresh" onclick="refreshBank('${bank.code}')">–û–±–Ω–æ–≤–∏—Ç—å</button>
                        <button class="btn-small btn-accounts" onclick="viewAccounts('${bank.code}')">–°—á–µ—Ç–∞</button>
                        <button class="btn-small btn-transactions" onclick="viewTransactions('${bank.code}')">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</button>
                    </div>
                </div>
            `;
        }
        
        banksGrid.innerHTML = html;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤:', error);
        document.getElementById('banksGrid').innerHTML = '<div class="empty-state">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤</div>';
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–∞–Ω–∫–æ–≤
function refreshBank(bankCode) {
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

function viewAccounts(bankCode) {
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—á–µ—Ç–æ–≤ –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤
}

function viewTransactions(bankCode) {
    console.log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–∞–Ω–∫–∞ ${bankCode}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–µ—Ç–æ–¥–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞–º–∏
function showPlaidManagement() {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Plaid');
    window.location.href = '/budget-manager-cloud/plaid_management.html';
}

function showApiManagement() {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–∏—Ç–∫—É
    document.querySelectorAll('.method-card').forEach(card => card.classList.remove('active'));
    document.getElementById('api-method').classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.management-content').forEach(content => content.style.display = 'none');
    document.getElementById('api-management').style.display = 'block';
}

function showScrapingManagement() {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∞–ø–ø–∏–Ω–≥–æ–º');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–∏—Ç–∫—É
    document.querySelectorAll('.method-card').forEach(card => card.classList.remove('active'));
    document.getElementById('scraping-method').classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.management-content').forEach(content => content.style.display = 'none');
    document.getElementById('scraping-management').style.display = 'block';
}

function showManualManagement() {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–∏—Ç–∫—É
    document.querySelectorAll('.method-card').forEach(card => card.classList.remove('active'));
    document.getElementById('manual-method').classList.add('active');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.management-content').forEach(content => content.style.display = 'none');
    document.getElementById('manual-management').style.display = 'block';
}

async function openPlaidLink() {
    console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ Plaid Link...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Plaid Link
        const response = await fetch(`${API_BASE}/api/plaid/link/config`);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const config = await response.json();
        console.log('Plaid Link –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', config);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Plaid Link
        // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert('Plaid Link –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ. –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Plaid Link:', error);
        alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Plaid Link: ' + error.message);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ)
let customRates = {
    'USD': 1,     // USD –∫ USD (–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞)
    'CAD': 1.35,  // CAD –∫ USD
    'EUR': 0.85,  // EUR –∫ USD
    'UAH': 41.0,  // UAH –∫ USD
    'RUB': 83.0   // RUB –∫ USD
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—É—Ä—Å–∞
function updateCustomRate(fromCurrency, toCurrency, value) {
    const rate = parseFloat(value);
    if (isNaN(rate)) return;
    
    if (fromCurrency === 'CAD' && toCurrency === 'USD') {
        customRates.CAD = rate;
    } else if (fromCurrency === 'USD' && toCurrency === 'EUR') {
        customRates.EUR = rate;
    } else if (fromCurrency === 'USD' && toCurrency === 'UAH') {
        customRates.UAH = rate;
    } else if (fromCurrency === 'USD' && toCurrency === 'RUB') {
        customRates.RUB = rate;
    }
    
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫—É—Ä—Å—ã:', customRates);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
function convertCurrencyAmount() {
    const amountElement = document.getElementById('converter-amount');
    const fromCurrencyElement = document.getElementById('converter-from');
    const toCurrencyElement = document.getElementById('converter-to');
    const resultElement = document.getElementById('converter-result');
    
    if (!amountElement || !fromCurrencyElement || !toCurrencyElement || !resultElement) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    const amount = parseFloat(amountElement.value);
    const fromCurrency = fromCurrencyElement.value;
    const toCurrency = toCurrencyElement.value;
    
    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ${amount} ${fromCurrency} -> ${toCurrency}`);
    
    if (isNaN(amount) || amount <= 0) {
        resultElement.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
        return;
    }
    
    if (fromCurrency === toCurrency) {
        resultElement.textContent = `${getCurrencySymbol(toCurrency)}${amount.toFixed(2)}`;
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    if (!customRates[fromCurrency] || !customRates[toCurrency]) {
        console.log(`–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${fromCurrency}=${customRates[fromCurrency]}, ${toCurrency}=${customRates[toCurrency]}`);
        resultElement.textContent = '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: fromCurrency -> USD -> toCurrency
    const usdAmount = amount / customRates[fromCurrency];
    const convertedAmount = usdAmount * customRates[toCurrency];
    
    if (isNaN(convertedAmount)) {
        console.log('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        resultElement.textContent = '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏';
        return;
    }
    
    const symbol = getCurrencySymbol(toCurrency);
    resultElement.textContent = `${symbol}${convertedAmount.toFixed(2)}`;
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${symbol}${convertedAmount.toFixed(2)}`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
function getCurrencySymbol(currency) {
    switch(currency) {
        case 'UAH': return '‚Ç¥';
        case 'EUR': return '‚Ç¨';
        case 'USD': 
        case 'CAD': 
        case 'RUB': 
        default: return '$';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –≤–∞–ª—é—Ç
function updateCurrencyPair(pairNumber) {
    const fromSelect = document.getElementById(`currency-from-${pairNumber}`);
    const toSelect = document.getElementById(`currency-to-${pairNumber}`);
    const rateElement = document.getElementById(`rate-${pairNumber}`);
    
    if (!fromSelect || !toSelect || !rateElement) {
        console.log(`–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞—Ä—ã ${pairNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
    }
    
    const fromCurrency = fromSelect.value;
    const toCurrency = toSelect.value;
    
    console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—É ${pairNumber}: ${fromCurrency} -> ${toCurrency}`);
    
    if (fromCurrency === toCurrency) {
        rateElement.textContent = '1.0000';
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    if (!customRates[fromCurrency] || !customRates[toCurrency]) {
        console.log(`–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${fromCurrency}=${customRates[fromCurrency]}, ${toCurrency}=${customRates[toCurrency]}`);
        rateElement.textContent = 'N/A';
        return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: fromCurrency -> USD -> toCurrency
    const usdAmount = 1 / customRates[fromCurrency];
    const convertedAmount = usdAmount * customRates[toCurrency];
    
    if (isNaN(convertedAmount)) {
        console.log(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—ã ${pairNumber}`);
        rateElement.textContent = 'N/A';
        return;
    }
    
    rateElement.textContent = convertedAmount.toFixed(4);
    console.log(`‚úÖ –ü–∞—Ä–∞ ${pairNumber}: ${convertedAmount.toFixed(4)}`);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    setTimeout(() => {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä...');
        convertCurrencyAmount();
    }, 2000);
});


// Load initial data
// loadDashboard(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ DOMContentLoaded
// loadPlaidUsage(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ loadDashboard()
// loadExchangeRates(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ loadDashboard()
// loadAssets(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ loadDashboard()
// loadBanksForManagement(); // REMOVED - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ showTab('banks')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –ü–û–°–õ–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
const router = new URLRouter();
